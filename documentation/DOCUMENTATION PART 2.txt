DOCUMENTATION PART 2

                                                    TASK
                                            RAPID PROTOTYPING

					CHALLENGES
#1 challenge of choosing framework
Since iam good at django i choose django framework .

#2  views for the data extraction
i was stuck in views for sometime how to extract data and pass to the templates .I solve it using the context.

#3 challenge of locating pdf and extract data pdf from that data
I use stack over flow and read some blogs about it and i came to understand
how to solve that problem
                   DESIGN CHOICES
# I used css to design the pages  
# Ensured a Responsive design for consistent and User friendly 
experience 
                    RUNNING APPLICATION

# intall django using (pip install django )
# install neccesry libraries for converting into csv using pip (pypdf,pandas,cv2,os,re,pytesseract)
# running the app - python manage.py runserver (verify that you are inside the project folder)


                    CODE EXPLANATION
1  MODELS.PY FILE

  # created model named uploadpdf with a file field
class uploadpdf(models.Model):
    pdf = models.FileField(upload_to='data/pdf')

    def __str__(self):
        return self.pdf 
2 FORMS .PY 

from django import forms
from .models import uploadpdf

# created forms for handlingforms
class dataform(forms.ModelForm):
    class Meta:
        model=uploadpdf
        fields= ('pdf',)

3 VIEWS.PY

# import section
from django.shortcuts import render
from .forms import dataform
from PyPDF2 import PdfReader 
import pytesseract
pytesseract.pytesseract.tesseract_cmd=r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"
import cv2
import os
import re
import pandas as pd
import csv

# Creates views for handling the uploaded pdf and showing the exracted data
def index(request):

    ## saving files uploaded by user

    if request.method == 'POST':
     form=dataform(request.POST,request.FILES)
     if form.is_valid():
        instance=form.save()
        filename=instance.pdf.name
        pdffile=os.path.join('media/{}'.format(filename))

        ##Script for converting to csv format
        ##1 read te file

        if os.path.exists(pdffile):
            reader = PdfReader(pdffile) 
            page = reader.pages[0]     

            for i in page.images:
                with open(i.name,'wb') as d:
                    d.write(i.data)
                imgname=i.name
            img=cv2.imread('{}'.format(imgname))
            text=pytesseract.image_to_string(img)

            ##removed unwanted text like '=' when converting into csv
            remove='='
            newtext = re.sub(re.escape(remove),"",text)

            ##function for identifying start and end of table in invoice
            def start_end(datalist):
                start,end=[],[]
                for ind,line in enumerate(datalist):
                    if 'reference' in line.lower():
                        start.append(ind)
                    if 'length' in line.lower():
                        end.append(ind)
                return start,end

            lines=[]

            for line in newtext.splitlines():
                lines.append(line.strip())

            start,end=start_end(lines)   

            istart=int(''.join(map(str,start)))
            iend=int(''.join(map(str,end)))

            ## created table and stoting in dictionary
            result={
            
                'Reference':[],
                'Designation':[],
                'Qty':[],
                'Unit_price':[],
                'Total_CHF':[],
                'sales':[],
                
            }

            for  i in lines[istart:iend]:   
                if 'work' not in i.lower() and 'and' not in i.lower() and 'exterior' not in i.lower() and 'reference' not in i.lower() :
                    result['Reference'].append(i.split()[0])
                    result['sales'].append(i.split()[-1])
                    result['Total_CHF'].append(i.split()[-2])
                    result['Unit_price'].append(i.split()[-3])
                    result['Qty'].append(i.split()[-2])
                    result['Designation'].append(' '.join( i.split()[2:-4]))

            ## converted dictionary into csv format using pandas
            df=pd.DataFrame(result)
            df.to_csv('result.csv',index=False)

            ## extracting headers
            for i in lines:
                if 'invoice' in i.lower():
                    invoice=i
                if 'payment date' in i.lower():
                    payment=i
        
            csv_file_path = 'result.csv'

            ## open csv file and and pass data to table as context
            with open(csv_file_path, 'r') as csvfile:
                csv_reader = csv.DictReader(csvfile)
                data = list(csv_reader)

            context = {'data': data,'invoice':invoice,'payment':payment}
          
        return render(request,'result.html',context)
        
          


    else:
        form=dataform()
    
    ## webpage for uploading pdf and passed form as context
    return render(request, 'index.html',{'form':form})

4 TEMPLATES 

INDEX.HTML
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- sytyles for form in style.css in static folder -->
    <link rel="stylesheet" href="{% static 'style.css' %}">
</head>

<body>
    <h1>Data Extractor</h1>
    <!-- form for uploading files  -->
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        <!-- form is passed as context -->
            {% for field in form %}
            {{ field }}
            {% endfor %}
    <input type="submit" name="submit" value="UPLOAD">
    </form>
</body>
</html>

RESULT. HTML
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{% static 'style.css' %}">
    <title>Document</title>
    <style>
                /* styles for table */
        table{
            border-collapse: collapse;
            text-align: center;
        }
        td,th{
            
            border:2px solid black;
            border-collapse: collapse;
            padding: 5px;

        }
        table.center{
            margin-left: auto;
            margin-right: auto;
        }
    </style>
</head>
<body>
    <h1>Extracted Data</h1>

    <!-- Extracted invoice and payment is passed as context -->
      <p>{{invoice}}</p> 
      <p>{{payment}}</p>

      <!-- table for showing the extracted table which is passed as context -->
    <table class="center">
        <thead>
            <tr>
                {% for header, value in data.0.items %}
                    <th>{{ header }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
                <tr>
                    {% for header, value in row.items %}
                        <td>{{ value }}</td>
                    {% endfor %}
                </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

5 STYLES FOR TEMPLATE

/* body styles */
body{
    text-align: center;
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
   
}


/* form styles */
form{
    box-shadow: 10px 10px lightblue;
    position:absolute;
    left:30%;
    right:25%;
    text-align: center;
    width:30%;
    padding:30px;
    background-color: aquamarine;
    border-radius: 5px;


}

/* submit button styles */
input[type='submit']{
    color:white;
    cursor: pointer;
    padding: 10px;
    background-color: black;
    border-radius: 10px;
    font-weight: bolder;
}
input[type='submit']:hover{
    background-color:red;
}

/* for not showing label of forms */
.nolabel{
    display: none;
}



